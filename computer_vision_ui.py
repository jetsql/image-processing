# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'nm6101098.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

#UI(pyQT使用套件)
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
import cv2
import numpy as np
import os
FILENAME=""
class Ui_Dialog(object):
    def __init__(self,path='.\\Dataset_OpenCvDl_Hw1\\'):
        self.img_1_4_strong=cv2.imread(".\\Dataset_OpenCvDl_Hw1\\Q1_Image\\Dog_Strong.jpg")
        self.img_1_4_weak=cv2.imread(".\\Dataset_OpenCvDl_Hw1\\Q1_Image\\Dog_Weak.jpg")
        self.img_2_white=cv2.imread(".\\Dataset_OpenCvDl_Hw1\\Q2_Image\\Lenna_whiteNoise.jpg")
        self.img_2_pepper=cv2.imread(".\\Dataset_OpenCvDl_Hw1\\Q2_Image\\Lenna_pepperSalt.jpg")
        self.img_3_house=cv2.imread(".\\Dataset_OpenCvDl_Hw1\\Q3_Image\\House.jpg")
        self.f3_gaussian=[]
        self.f3_filter=np.array([
            [0.045,0.122,0.045],
            [0.122,0.332,0.122],
            [0.045,0.122,0.045]
        ])
        self.f3_sobel_x=np.array([[-1,0,1],[-2,0,2],[-1,0,1]])
        self.f3_sobel_y=np.array([[1,2,1],[0,0,0],[-1,-2,-1]])
        self.f4_img=cv2.imread(".\\Dataset_OpenCvDl_Hw1\\Q4_Image\\SQUARE-01.png")
        self.f4_window_w=400
        self.f4_window_h=300
        self.f4_shift_img=[]
        self.f4_rotation_img=[]
        self.f4_shearing_img=[]
        
    #主要UI介面
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(951, 542)
        self.buttonBox = QtWidgets.QDialogButtonBox(Dialog)
        self.buttonBox.setGeometry(QtCore.QRect(570, 10, 341, 32))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.groupBox_1 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_1.setGeometry(QtCore.QRect(30, 50, 211, 471))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_1.setFont(font)
        self.groupBox_1.setMouseTracking(False)
        self.groupBox_1.setFlat(False)
        self.groupBox_1.setCheckable(False)
        self.groupBox_1.setObjectName("groupBox_1")
        self.pushButton_1_1 = QtWidgets.QPushButton(self.groupBox_1)
        self.pushButton_1_1.setGeometry(QtCore.QRect(20, 60, 181, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_1_1.sizePolicy().hasHeightForWidth())
        self.pushButton_1_1.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.pushButton_1_1.setFont(font)
        self.pushButton_1_1.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_1_1.setObjectName("pushButton_1_1")
        self.pushButton_1_2 = QtWidgets.QPushButton(self.groupBox_1)
        self.pushButton_1_2.setGeometry(QtCore.QRect(20, 140, 181, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_1_2.sizePolicy().hasHeightForWidth())
        self.pushButton_1_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.pushButton_1_2.setFont(font)
        self.pushButton_1_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_1_2.setObjectName("pushButton_1_2")
        self.pushButton_1_3 = QtWidgets.QPushButton(self.groupBox_1)
        self.pushButton_1_3.setGeometry(QtCore.QRect(20, 220, 181, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_1_3.sizePolicy().hasHeightForWidth())
        self.pushButton_1_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.pushButton_1_3.setFont(font)
        self.pushButton_1_3.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_1_3.setObjectName("pushButton_1_3")
        self.pushButton_1_4 = QtWidgets.QPushButton(self.groupBox_1)
        self.pushButton_1_4.setGeometry(QtCore.QRect(20, 300, 181, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_1_4.sizePolicy().hasHeightForWidth())
        self.pushButton_1_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.pushButton_1_4.setFont(font)
        self.pushButton_1_4.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_1_4.setObjectName("pushButton_1_4")
        self.groupBox_2 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_2.setGeometry(QtCore.QRect(250, 50, 211, 471))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setObjectName("groupBox_2")
        self.pushButton_2_1 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_2_1.setGeometry(QtCore.QRect(10, 100, 181, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_2_1.sizePolicy().hasHeightForWidth())
        self.pushButton_2_1.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.pushButton_2_1.setFont(font)
        self.pushButton_2_1.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_2_1.setObjectName("pushButton_2_1")
        self.pushButton_2_2 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_2_2.setGeometry(QtCore.QRect(10, 180, 181, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_2_2.sizePolicy().hasHeightForWidth())
        self.pushButton_2_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.pushButton_2_2.setFont(font)
        self.pushButton_2_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_2_2.setObjectName("pushButton_2_2")
        self.pushButton_2_3 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_2_3.setGeometry(QtCore.QRect(10, 260, 181, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_2_3.sizePolicy().hasHeightForWidth())
        self.pushButton_2_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.pushButton_2_3.setFont(font)
        self.pushButton_2_3.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_2_3.setObjectName("pushButton_2_3")
        self.groupBox_3 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_3.setGeometry(QtCore.QRect(480, 50, 211, 471))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setObjectName("groupBox_3")
        self.pushButton_3_1 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_3_1.setGeometry(QtCore.QRect(20, 60, 181, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_3_1.sizePolicy().hasHeightForWidth())
        self.pushButton_3_1.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.pushButton_3_1.setFont(font)
        self.pushButton_3_1.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_3_1.setObjectName("pushButton_3_1")
        self.pushButton_3_2 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_3_2.setGeometry(QtCore.QRect(20, 140, 181, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_3_2.sizePolicy().hasHeightForWidth())
        self.pushButton_3_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.pushButton_3_2.setFont(font)
        self.pushButton_3_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_3_2.setObjectName("pushButton_3_2")
        self.pushButton_3_3 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_3_3.setGeometry(QtCore.QRect(20, 220, 181, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_3_3.sizePolicy().hasHeightForWidth())
        self.pushButton_3_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.pushButton_3_3.setFont(font)
        self.pushButton_3_3.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_3_3.setObjectName("pushButton_10")
        self.pushButton_3_4 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_3_4.setGeometry(QtCore.QRect(20, 300, 181, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_3_4.sizePolicy().hasHeightForWidth())
        self.pushButton_3_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.pushButton_3_4.setFont(font)
        self.pushButton_3_4.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_3_4.setObjectName("pushButton_3_4")
        self.groupBox_4 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_4.setGeometry(QtCore.QRect(700, 50, 201, 471))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_4.setFont(font)
        self.groupBox_4.setObjectName("groupBox_4")
        self.pushButton_4_1 = QtWidgets.QPushButton(self.groupBox_4)
        self.pushButton_4_1.setGeometry(QtCore.QRect(10, 100, 181, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_4_1.sizePolicy().hasHeightForWidth())
        self.pushButton_4_1.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.pushButton_4_1.setFont(font)
        self.pushButton_4_1.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_4_1.setObjectName("pushButton_4_2")
        self.pushButton_4_2 = QtWidgets.QPushButton(self.groupBox_4)
        self.pushButton_4_2.setGeometry(QtCore.QRect(10, 180, 181, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_4_2.sizePolicy().hasHeightForWidth())
        self.pushButton_4_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.pushButton_4_2.setFont(font)
        self.pushButton_4_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_4_2.setObjectName("pushButton_4_2")
        self.pushButton_4_3 = QtWidgets.QPushButton(self.groupBox_4)
        self.pushButton_4_3.setGeometry(QtCore.QRect(10, 260, 181, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_4_3.sizePolicy().hasHeightForWidth())
        self.pushButton_4_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.pushButton_4_3.setFont(font)
        self.pushButton_4_3.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_4_3.setObjectName("pushButton_4_3")
        self.pushButton_4_4 = QtWidgets.QPushButton(self.groupBox_4)
        self.pushButton_4_4.setGeometry(QtCore.QRect(10, 340, 181, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_4_4.sizePolicy().hasHeightForWidth())
        self.pushButton_4_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.pushButton_4_4.setFont(font)
        self.pushButton_4_4.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_4_4.setObjectName("pushButton_4_4")

        self.retranslateUi(Dialog)
        self.buttonBox.accepted.connect(Dialog.accept) # type: ignore
        self.buttonBox.rejected.connect(Dialog.reject) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(Dialog)
    #設定物件執行事件
    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.groupBox_1.setTitle(_translate("Dialog", "1. Image Processing"))
        self.pushButton_1_1.setText(_translate("Dialog", "1.1 Load Image"))
        self.pushButton_1_2.setText(_translate("Dialog", "1.2 Color Seperation"))
        self.pushButton_1_3.setText(_translate("Dialog", "1.3 Color Transformations"))
        self.pushButton_1_4.setText(_translate("Dialog", "1.4 Blending"))
        self.groupBox_2.setTitle(_translate("Dialog", "2. Image Smoothing"))
        self.pushButton_2_1.setText(_translate("Dialog", "2.1 Gaussian Blur"))
        self.pushButton_2_2.setText(_translate("Dialog", "2.2 Bilateral Filter"))
        self.pushButton_2_3.setText(_translate("Dialog", "2.3 Median Filter"))
        self.groupBox_3.setTitle(_translate("Dialog", "3. Edge Detection"))
        self.pushButton_3_1.setText(_translate("Dialog", "3.1 Gaussian Blur"))
        self.pushButton_3_2.setText(_translate("Dialog", "3.2 Sobel X"))
        self.pushButton_3_3.setText(_translate("Dialog", "3.3 Sobel Y"))
        self.pushButton_3_4.setText(_translate("Dialog", "3.4 Magnitude"))
        self.groupBox_4.setTitle(_translate("Dialog", "4. Transformation"))
        self.pushButton_4_1.setText(_translate("Dialog", "4.1 Resize"))
        self.pushButton_4_2.setText(_translate("Dialog", "4.2 Translation"))
        self.pushButton_4_3.setText(_translate("Dialog", "4.3 Rotation,Scaling"))
        self.pushButton_4_4.setText(_translate("Dialog", "4.4 Shearing"))
        #程式功能部分
        self.pushButton_1_1.clicked.connect(self.f1_1)
        self.pushButton_1_2.clicked.connect(self.f1_2)
        self.pushButton_1_3.clicked.connect(self.f1_3)
        self.pushButton_1_4.clicked.connect(self.f1_4)
        self.pushButton_2_1.clicked.connect(self.f2_1)
        self.pushButton_2_2.clicked.connect(self.f2_2)
        self.pushButton_2_3.clicked.connect(self.f2_3)
        self.pushButton_3_1.clicked.connect(self.f3_1)
        self.pushButton_3_2.clicked.connect(self.f3_2)
        self.pushButton_3_3.clicked.connect(self.f3_3)
        self.pushButton_3_4.clicked.connect(self.f3_4)
        self.pushButton_4_1.clicked.connect(self.f4_1)
        self.pushButton_4_2.clicked.connect(self.f4_2)
        self.pushButton_4_3.clicked.connect(self.f4_3)
        self.pushButton_4_4.clicked.connect(self.f4_4)

    #########
    #第一大題 Image Processing
    #########

    #開檔案
    def f1_1(self):
        print("function 1_1 clicked")
        self.sub_window = SubWindow1_1()
        print("check")
        self.sub_window.show()
        pass
    #色彩分離
    def f1_2(self):
        print("function 1_2 clicked")
        cv2.destroyAllWindows()
        if FILENAME!="":
            img = cv2.imread(FILENAME)
            blue,green,red=cv2.split(img)
            width,height,channel=img.shape
            #建立二維空陣列
            zero_martix=np.zeros((width,height),dtype = "uint8")
            cv2.imshow("f1_2_BLUE", cv2.merge([blue, zero_martix,  zero_martix]))
            cv2.imshow("f1_2_GREEN", cv2.merge([zero_martix, green, zero_martix]))
            cv2.imshow("f1_2_RED", cv2.merge([zero_martix, zero_martix, red]))
            cv2.waitKey(0)
            pass
        else:
            print("no img")
        pass
    #色彩轉換，用第一題的圖檔就不用在開了
    def f1_3(self):
        print("function 1_3 clicked")
        cv2.destroyAllWindows()
        if FILENAME!="":
            img = cv2.imread(FILENAME)
            #第一小題直接轉灰階
            f_1_3_L1=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
            cv2.imshow("f_1_3_L1",f_1_3_L1)
            #第二小題目加起來除以3，沿用f1_2程式
            blue,green,red=cv2.split(img)
            width,height,channel=img.shape
            zero_martix=np.zeros((width,height),dtype = "uint8")
            blue_image=cv2.merge([blue, zero_martix,  zero_martix])
            green_image=cv2.merge([zero_martix, green, zero_martix])
            red_image=cv2.merge([zero_martix, zero_martix, red])

            f_1_3_L2=(red_image+green_image+blue_image)/3
            f_1_3_L2=(f_1_3_L2.astype(int)).astype("uint8")
            f_1_3_L2=cv2.cvtColor(f_1_3_L2,cv2.COLOR_BGR2GRAY)
            cv2.imshow("f_1_3_L2",f_1_3_L2)
            cv2.waitKey(0)
            pass
        else:
            print("no img")
        pass
    #Blending，不用開圖樣
    def f1_4(self):
        #https://blog.csdn.net/weixin_44493841/article/details/102483184
        print("function 1_4 clicked")
        cv2.destroyAllWindows()
        def fusion_image(vaule):
            #得到bar數值(name,window,default)
            track=cv2.getTrackbarPos('Alpha','f_1_4')
            bar_min=track/255
            bar_max=1-(track/255)
            #(影像1,alpha,影像2,beta)
            distance=cv2.addWeighted(self.img_1_4_strong,bar_max,self.img_1_4_weak,bar_min,0)
            cv2.imshow('f_1_4',distance)
        #另外建視窗
        cv2.namedWindow('f_1_4')
        cv2.resizeWindow('f_1_4',600,600)
        #滑動條
        cv2.createTrackbar('Alpha','f_1_4',0,255,fusion_image)
        cv2.waitKey(0)
        pass
    #########
    #第二大題 Image Smoothing
    #########

    #gaussian_blur
    def f2_1(self):
        #https://0xzx.com/zh-tw/202009201610831510.html
        print("function 2_1 clicked")
        cv2.destroyAllWindows()
        cv2.imshow('white_img',self.img_2_white)
        #參數 (src, ksize, sigmaX, sigmaY, borderType)
        gaussian_img=cv2.GaussianBlur(self.img_2_white,(5,5),1,1)
        cv2.imshow('f2_1',gaussian_img)
        cv2.waitKey(0)
        pass
    #Bilateral filter
    def f2_2(self):
        #https://blog.csdn.net/duwangthefirst/article/details/79971369
        print("function 2_2 clicked")
        #參數(src, ksize, sigmaColor, sigmaSpace)
        bilateral_img=cv2.bilateralFilter(self.img_2_white,9,90,90)
        cv2.imshow('f_2_2',bilateral_img)
        cv2.waitKey(0)
        pass
    #Median filter 
    def f2_3(self):
        #https://opencv24-python-tutorials.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_filtering/py_filtering.html
        print("function 2_3 clicked")
        cv2.destroyAllWindows()
        cv2.imshow('pepper_img',self.img_2_pepper)
        #參數(src,ksize)
        median_1=cv2.medianBlur(self.img_2_pepper,3)
        median_2=cv2.medianBlur(self.img_2_pepper,5)
        cv2.imshow('f_2_3_1',median_1)
        cv2.imshow('f_2_3_2',median_2)
        pass
    
    #########
    #第三大題 Edge Detection
    #########
    def f3_(self,heigh,width,filter):
        image_list_1=[]
        for i in range (heigh-3):
            image_list_2=[]
            for j in range(width-3):
                start=i+3
                end=j+3
                data=self.img_3_house[i:start,j:end]
                #將兩個元素位置相乘
                mix_vaule=np.multiply(filter,data)
                #將矩陣內的做加總
                sum_vaule=np.sum(mix_vaule)
                image_list_2.append(sum_vaule)
            image_list_1.append(image_list_2)
        gaussian_blur=np.array(image_list_1).astype(np.uint8)
        return gaussian_blur
    #Gaussian Blur
    def f3_1(self):
        #https://blog.csdn.net/zenghaitao0128/article/details/78715140
        print("function 3_1 clicked")
        cv2.destroyAllWindows()
        #題目filter
        normalize_filter=self.f3_filter
        #convert the RGB  into a grayscale image
        gray=cv2.cvtColor(self.img_3_house,cv2.COLOR_BGR2GRAY)
        
         
        heigh,width,channel=self.img_3_house.shape
        #Gaussian smooth it ，不能用openCV  
        self.f3_gaussian=self.f3_(heigh,width,normalize_filter)
        cv2.imshow('f_3_1_gray',gray)
        cv2.imshow('f_3_1_blur',self.f3_gaussian)
        cv2.waitKey(0)
        pass

    #Sobel X，不能用openCV
    def f3_2(self):
        print("function 3_2 clicked")
        cv2.destroyAllWindows()
        heigh_house,width_house,channel_1=self.img_3_house.shape
        #清空ndarray
        self.f3_gaussian=[]
        #f3_1題目filter
        normalize_filter=self.f3_filter
        #重新填入
        self.f3_gaussian=self.f3_(heigh_house,width_house,normalize_filter)
        heigh_gaussian,width_gaussian=self.f3_gaussian.shape
        #題目sobel_x filter
        sobel_x_filter=self.f3_sobel_x
        #建立空白矩陣
        sobel_zero_martix=np.zeros((heigh_gaussian,width_gaussian))
        gaussian_zero_martix=np.zeros(self.f3_gaussian.shape)
        #塞值
        for i in range(heigh_gaussian-2):
            for j in range(width_gaussian-2):
                sum_vaule=np.sum(self.f3_gaussian[i:i+3,j:j+3] * sobel_x_filter)
                gaussian_zero_martix[i + 1, j + 1] = abs(sum_vaule)
                sobel_zero_martix[i+1,j+1]=gaussian_zero_martix[i+1,j+1]
        sobal_x_img=np.uint8(sobel_zero_martix)
        cv2.imshow('f3_2',sobal_x_img)
        cv2.waitKey(0)
        pass

    #Sobel Y，不能用openCV
    def f3_3(self):
        print("function 3_3 clicked")
        cv2.destroyAllWindows()
        heigh_house,width_house,channel_1=self.img_3_house.shape
        #清空ndarray
        self.f3_gaussian=[]
        #f3_1題目filter
        normalize_filter=self.f3_filter
        #重新填入
        self.f3_gaussian=self.f3_(heigh_house,width_house,normalize_filter)
        heigh_gaussian,width_gaussian=self.f3_gaussian.shape
        #題目sobel_y filter
        sobel_x_filter=self.f3_sobel_y
        #建立空白矩陣
        sobel_zero_martix=np.zeros((heigh_gaussian,width_gaussian))
        gaussian_zero_martix=np.zeros(self.f3_gaussian.shape)
        #塞值
        for i in range(heigh_gaussian-2):
            for j in range(width_gaussian-2):
                sum_vaule=np.sum(self.f3_gaussian[i:i+3,j:j+3] * sobel_x_filter)
                gaussian_zero_martix[i + 1, j + 1] = abs(sum_vaule)
                sobel_zero_martix[i+1,j+1]=gaussian_zero_martix[i+1,j+1]
        sobal_y_img=np.uint8(sobel_zero_martix)
        cv2.imshow('f3_3',sobal_y_img)
        cv2.waitKey(0)
       
        pass    

    #Magnitude 
    def f3_4(self):
        print("function 3_4 clicked")
        cv2.destroyAllWindows()
        heigh_house,width_house,channel_1=self.img_3_house.shape
        #清空ndarray
        self.f3_gaussian=[]
        #f3_1題目filter
        normalize_filter=self.f3_filter
        #重新填入
        self.f3_gaussian=self.f3_(heigh_house,width_house,normalize_filter)
        heigh_gaussian,width_gaussian=self.f3_gaussian.shape
        #建立空白矩陣
        sobel_x_zero_martix=np.zeros((heigh_gaussian,width_gaussian))
        sobel_y_zero_martix=np.zeros((heigh_gaussian,width_gaussian))
        gaussian_zero_martix=np.zeros((heigh_gaussian,width_gaussian))
        #塞值
        for i in range(heigh_gaussian-2):
            for j in range(width_gaussian-2):
                start_sum=i+3
                end_sum=j+3
                start_input=i+1
                end_input=j+1

                x_sum_vaule=np.sum(self.f3_gaussian[i:start_sum,j:end_sum]*self.f3_sobel_x)
                y_sum_vaule=np.sum(self.f3_gaussian[i:start_sum,j:end_sum]*self.f3_sobel_y)
                
                #塞sobel_x
                sobel_x_zero_martix[start_input,end_input]=abs(x_sum_vaule)
                #塞sobel_y
                sobel_y_zero_martix[start_input,end_input]=abs(y_sum_vaule)
                #整理數值
                x_vaule=sobel_x_zero_martix[start_input,end_input]
                y_vaule=sobel_y_zero_martix[start_input,end_input]
                #塞結果，用Magnitude 公式
                gaussian_zero_martix[start_input,end_input]=(x_vaule*x_vaule+y_vaule*y_vaule)**0.5
        magnitude_img=np.uint8(gaussian_zero_martix)
        cv2.imshow('f3_4',magnitude_img)
        cv2.waitKey(0)


        pass
    #########
    #第四大題 Transforms
    #########

    #Resize
    def f4_1(self):
        print("function 4_1 clicked")
        cv2.destroyAllWindows()
        cv2.imshow('f4_1_img',self.f4_img)
        self.f4_img=cv2.resize(self.f4_img,(256,256))
        cv2.imshow('f4_1_result',self.f4_img)
        cv2.waitKey(0)
        pass
    #Translation
    def f4_2(self):
        #https://blog.csdn.net/qq878594585/article/details/81838260
        '''
        題目
        Xnew = Xold + 0 pixels = 128 + 0 = 128
        Ynew = Yold + 60 pixels = 128 + 60 = 188
        Point C (128, 128) is center of resized image
        Point C’(128, 188) is new center of image
        '''
        print("function 4_2 clicked")
        _x=0
        _y=60
        #設定點
        template=np.float32([[1,0,_x],[0,1,_y]])
        self.f4_shift_img=cv2.warpAffine(self.f4_img,template,(self.f4_window_w,self.f4_window_h))
        cv2.imshow('f4_2',self.f4_shift_img)
        cv2.waitKey(0)
        pass
    #Rotation, Scaling
    def f4_3(self):
        print("function 4_3 clicked")
        _x_new=128+0
        _y_new=128+60
        _angle=10
        _scale=0.5
        shift_img=self.f4_shift_img
        #設定點，angle為10度，scale為0.5
        martix=cv2.getRotationMatrix2D((_x_new, _y_new),_angle, _scale)
        self.f4_rotation_img=cv2.warpAffine(shift_img,martix,(self.f4_window_w,self.f4_window_h))
        cv2.imshow('f4_3',self.f4_rotation_img)
        cv2.waitKey(0)
        pass
    #Shearing
    def f4_4(self):
        print("function 4_4 clicked")
        old_location=np.float32([[50,50],[200,50],[50,200]])
        new_location=np.float32([[10,100],[200,50],[100,250]])
        martix=cv2.getAffineTransform(old_location,new_location)
        self.f4_shearing_img=cv2.warpAffine(self.f4_rotation_img,martix,(self.f4_window_w,self.f4_window_h))
        cv2.imshow('f4_4',self.f4_shearing_img)
        cv2.waitKey(0)
        pass
#顯示另外一個畫布開檔案
class SubWindow1_1(QWidget):
    def __init__(self):
        super(SubWindow1_1,self).__init__()
        self.resize(400,300)
        self.setWindowTitle("load Image")
        self.width = QtWidgets.QLabel(self)
        self.width.setGeometry(QtCore.QRect(130, 40, 60, 30))
        self.width.setObjectName("width")
        self.height = QtWidgets.QLabel(self)
        self.height.setGeometry(QtCore.QRect(130, 80, 60, 30))
        self.height.setObjectName("height")
        self.lineEdit = QtWidgets.QLineEdit(self)
        #(x1,y1,x2,y2)
        self.lineEdit.setGeometry(QtCore.QRect(130, 20, 141, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.open_Button = QtWidgets.QPushButton(self)
        self.open_Button.setGeometry(QtCore.QRect(100, 150, 75, 23))
        self.open_Button.setObjectName("Browse")
        self.open_Button.setText("Browse")
        self.open_Button.clicked.connect(self.browsefiles)
        self.ok_Button = QtWidgets.QPushButton(self)
        self.ok_Button.setGeometry(QtCore.QRect(210, 150, 75, 23))
        self.open_Button.setObjectName("OK!")
        self.ok_Button.setText("OK!")
        self.ok_Button.clicked.connect(self.pushfilename)
    #跳視窗開檔
    def browsefiles(self):
        path=os.getcwd()
        path=str(path)
        print(path)
        fileName = QFileDialog.getOpenFileName(self,'Open File',str(path),'*.jpg')
        global FILENAME
        FILENAME = fileName[0]
        self.lineEdit.setText(fileName[0])
    def pushfilename(self):
        global FILENAME
        src = cv2.imread(FILENAME)
        #設定text數值
        self.height.setText(f"Width = {src.shape[0]}")
        self.width.setText(f"Height = {src.shape[1]}")
        cv2.namedWindow(FILENAME,cv2.WINDOW_AUTOSIZE)
        cv2.imshow(FILENAME,src)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
