# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'hw2_5.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from tensorflow.keras.callbacks import TensorBoard
from tensorflow.keras import backend as K
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Flatten, Dense, Dropout
from tensorflow.keras.applications.resnet50 import ResNet50
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import tensorflow as tf
import numpy as np
import time

class Ui_Dialog(object):
    def __init__(self):
        self.NAME = "Cat-vs-Dos-ResNet50-{}".format(int(time.time()))  # 避免overwritting
        self.tensorboard = TensorBoard(log_dir='logs/{}'.format(self.NAME), histogram_freq=1)
        self.DATASET_PATH = 'G:/共用雲端硬碟/PerryShare/data/data/'
        self.IMAGE_SIZE = (224, 224)  
        self.NUM_CLASSES = 2
        self.BATCH_SIZE = 16 
        self.FREEZE_LAYERS = 2
        self.NUM_EPOCHS = 5
        #model
        self.train_datagen = ImageDataGenerator(rotation_range=30,
                                   width_shift_range=0.2,
                                   height_shift_range=0.2,
                                   shear_range=0.2,
                                   zoom_range=0.5,
                                   channel_shift_range=10,
                                   horizontal_flip=True,
                                   fill_mode='nearest',
                                   preprocessing_function=self.get_random_eraser())

        self.train_batches = self.train_datagen.flow_from_directory(self.DATASET_PATH + '/train',
                                                        target_size=self.IMAGE_SIZE,
                                                        interpolation='bicubic',
                                                        class_mode='categorical',  # 2D one-hot
                                                        shuffle=True,
                                                        batch_size=self.BATCH_SIZE)

        self.valid_datagen = ImageDataGenerator()

        self.valid_batches = self.valid_datagen.flow_from_directory(self.DATASET_PATH + '/validation',
                                                        target_size=self.IMAGE_SIZE,
                                                        interpolation='bicubic',
                                                        class_mode='categorical',
                                                        shuffle=False,
                                                        batch_size=self.BATCH_SIZE)
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(371, 272)
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(90, 20, 181, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(90, 70, 181, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Dialog)
        self.pushButton_3.setGeometry(QtCore.QRect(90, 110, 181, 28))
        self.pushButton_3.setObjectName("pushButton_3")
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(90, 150, 181, 22))
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton_4 = QtWidgets.QPushButton(Dialog)
        self.pushButton_4.setGeometry(QtCore.QRect(90, 190, 181, 28))
        self.pushButton_4.setObjectName("pushButton_4")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.pushButton.setText(_translate("Dialog", "1. Show Model Structure"))
        self.pushButton_2.setText(_translate("Dialog", "2. Show TensorBoaed"))
        self.pushButton_3.setText(_translate("Dialog", "3. Test"))
        self.pushButton_4.setText(_translate("Dialog", "4. Data Augmantation"))
        #按鈕功能
        self.pushButton.clicked.connect(self.show_model)
    def get_random_eraser(p=0.5, sl=0.02, sh=0.4, r1=0.3, r2=1 / 0.3, v_l=0, v_h=255):
        def eraser(img):

            if img.ndim == 3:
                img_h, img_w, img_c = img.shape

            elif img.ndim == 2:
                img_h, img_w = img.shape

            if np.random.rand() > p:
                return img

            while True:
                s = np.random.uniform(sl, sh) * img_h * img_w
                r = np.random.uniform(r1, r2)
                w = int(np.sqrt(s / r))
                h = int(np.sqrt(s * r))

                xe = np.random.randint(0, img_w)
                ye = np.random.randint(0, img_h)

                if xe + w <= img_w and ye + h <= img_h:
                    break

            img[ye:ye + h, xe:xe + w] = np.random.uniform(v_l, v_h)

            return img

        return eraser
    def show_model(self):
        model = ResNet50(include_top=False, weights='imagenet', input_tensor=None,
                    input_shape=(self.IMAGE_SIZE[0], self.IMAGE_SIZE[1], 3))
        x = model .layers[-1].output
        x = Flatten()(x)
        x = Dropout(0.5)(x)
        x = Dense(2, activation='softmax', name='predictions')(x)
        model.summary()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
